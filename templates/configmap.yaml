apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "gitlab-runner.fullname" . }}
  labels:
    app: {{ include "gitlab-runner.fullname" . }}
    chart: {{ include "gitlab-runner.chart" . }}
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
  entrypoint: |
    #!/bin/bash
    set -e
    mkdir -p /home/gitlab-runner/.gitlab-runner/
    cp /scripts/config.toml /home/gitlab-runner/.gitlab-runner/

    # Register the runner
    if [[ -f /secrets/accesskey && -f /secrets/secretkey ]]; then
      export CACHE_S3_ACCESS_KEY=$(cat /secrets/accesskey)
      export CACHE_S3_SECRET_KEY=$(cat /secrets/secretkey)
    fi

    if [[ -f /secrets/gcs-applicaton-credentials-file ]]; then
      export GOOGLE_APPLICATION_CREDENTIALS="/secrets/gcs-applicaton-credentials-file"
    else
      if [[ -f /secrets/gcs-access-id && -f /secrets/gcs-private-key ]]; then
        export CACHE_GCS_ACCESS_ID=$(cat /secrets/gcs-access-id)
        # echo -e used to make private key multiline (in google json auth key private key is oneline with \n)
        export CACHE_GCS_PRIVATE_KEY=$(echo -e $(cat /secrets/gcs-private-key))
      fi
    fi

    if [[ -f /secrets/runner-registration-token ]]; then
      export REGISTRATION_TOKEN=$(cat /secrets/runner-registration-token)
    fi

    if [[ -f /secrets/runner-token ]]; then
      export CI_SERVER_TOKEN=$(cat /secrets/runner-token)
    fi

    if ! sh /scripts/register-the-runner; then
      exit 1
    fi

    # Start the runner
    exec /entrypoint run --user=gitlab-runner \
      --working-directory=/home/gitlab-runner

  config.toml: |
    concurrent = {{ .Values.concurrent }}
    check_interval = {{ .Values.checkInterval }}
    log_level = {{ default "info" .Values.logLevel | quote }}
    {{- if .Values.metrics.enabled }}
    listen_address = '[::]:9252'
    {{- end }}
  config.template.toml: |
    # This is a Runner configuration template file, that will be used to feed the final configuration
    # saved after registering the Runner. Thanks to this we can easily handled most of the setting
    # (instead of relaying on environment variables and/or command line options) and for some of the
    # settings, like Kubernetes volumes section, it's the only way to automatise the configuration.
    # Please read https://docs.gitlab.com/runner/register/index.html#runners-configuration-template-file
    # for detailed description of how this feature works
    #

    [[runners]]
      request_concurrency = {{ default 1 .Values.runners.requestConcurrency }}
      {{- if .Values.runners.cloneUrl }}
      clone_url = {{ .Values.runners.cloneUrl | quote }}
      {{- end }}
      environment = [{{ include "gitlab-runner.join-hash-by-comma-quoted" .Values.runners.env }}]

      [runners.kubernetes]
        image = {{ .Values.runners.image | quote }}
        namespace = {{ default .Release.Namespace .Values.runners.namespace | quote }}
        {{ if .Values.runners.privileged }}privileged = true{{- end }}

        pull_policy = {{ default "" .Values.runners.imagePullPolicy | quote }}
        image_pull_secrets = [{{ include "gitlab-runner.join-slice-by-comma-quoted" .Values.runners.imagePullSecrets }}]

        cpu_limit = {{ default "" .Values.runners.builds.cpuLimit | quote }}
        memory_limit = {{ default "" .Values.runners.builds.memoryLimit | quote }}
        cpu_requests = {{ default "" .Values.runners.builds.cpuRequests | quote }}
        memory_requests = {{ default "" .Values.runners.builds.memoryRequests| quote }}

        service_account = {{ default "" .Values.runners.serviceAccountName | quote }}
        service_cpu_limit = {{ default "" .Values.runners.services.cpuLimit | quote }}
        service_memory_limit = {{ default "" .Values.runners.services.memoryLimit | quote }}
        service_cpu_requests = {{ default "" .Values.runners.services.cpuRequests | quote }}
        service_memory_requests = {{ default "" .Values.runners.services.memoryRequests | quote }}

        helper_image = {{ default "" .Values.runners.helpers.image | quote }}

        helper_cpu_limit = {{ default "" .Values.runners.helpers.cpuLimit | quote }}
        helper_memory_limit = {{ default "" .Values.runners.helpers.memoryLimit | quote }}
        helper_cpu_requests = {{ default "" .Values.runners.helpers.cpuRequests | quote }}
        helper_memory_requests = {{ default "" .Values.runners.helpers.memoryRequests | quote }}

        [runners.kubernetes.node_selector]
          {{- range $key, $val := .Values.runners.nodeSelector }}
          {{ $key | quote }} = {{ $val | quote }}
          {{- end }}

        [runners.kubernetes.pod_labels]
          {{- range $key, $val := .Values.runners.podLabels }}
          {{ $key | quote }} = {{ $val | quote }}
          {{- end }}

        [runners.kubernetes.pod_annotations]
          {{- range $key, $val := .Values.runners.podAnnotations }}
          {{ $key | quote }} = {{ $val | quote }}
          {{- end }}

      {{- if and .Values.runners.cache .Values.runners.cache.cacheType }}
      [runners.cache]
        Type = {{ default "" .Values.runners.cache.cacheType | quote }}
        Path = {{ coalesce .Values.runners.cache.cachePath .Values.runners.cache.s3CachePath | default "" | quote }}
        {{ if .Values.runners.cache.cacheShared }}Shared = true{{- end }}

        {{- if eq .Values.runners.cache.cacheType "s3" }}
        [runners.cache.s3]
          ServerAdress = {{ include "gitlab-runner.cache.s3ServerAddress" . }}
          BucketName = {{ default "" .Values.runners.cache.s3BucketName | quote }}
          BucketLocation = {{ default "" .Values.runners.cache.s3BucketLocation | quote }}
          {{ if .Values.runners.cache.s3CacheInsecure }}Insecure = true{{- end}}
        {{- end }}

        {{- if eq .Values.runners.cache.cacheType "gcs" }}
        [runners.cache.gcs]
          BucketName = {{ default "" .Values.runners.cache.gcsBucketName | quote }}
        {{- end }}
      {{- end }}

  configure: |
    set -e
    cp /init-secrets/* /secrets
  register-the-runner: |
    #!/bin/bash
    MAX_REGISTER_ATTEMPTS=30

    for i in $(seq 1 "${MAX_REGISTER_ATTEMPTS}"); do
      echo "Registration attempt ${i} of ${MAX_REGISTER_ATTEMPTS}"
      /entrypoint register \
        --url {{ include "gitlab-runner.gitlabUrl" . }} \
        {{- if or (not (hasKey .Values.runners "locked")) .Values.runners.locked }}
        --locked=true \
        {{- else -}}
        --locked=false \
        {{- end }}
        {{- if and (hasKey .Values.runners "runUntagged") .Values.runners.runUntagged }}
        --run-untagged=true \
        {{- end }}
        {{- if .Values.runners.tags }}
        --tag-list {{ .Values.runners.tags | quote }} \
        {{- end }}
        --template-config /scripts/config.template.toml \
        --executor "kubernetes" \
        --non-interactive

      retval=$?

      if [ ${retval} = 0 ]; then
        break
      elif [ ${i} = ${MAX_REGISTER_ATTEMPTS} ]; then
        exit 1
      fi

      sleep 5 
    done

    exit 0

  check-live: |
    #!/bin/bash
    if /usr/bin/pgrep -f .*register-the-runner; then
      exit 0
    elif /usr/bin/pgrep gitlab.*runner; then
      exit 0
    else
      exit 1
    fi
